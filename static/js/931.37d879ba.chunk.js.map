{"version":3,"file":"static/js/931.37d879ba.chunk.js","mappings":"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","sources":["components/ClearButton/ClearButtonFC.jsx","components/Display/DisplayFC.jsx","components/Key/KeyFC.jsx","components/Keypad/KeypadFC.jsx","components/Calculator/CalculatorFC.jsx","components/History/HistoryFC.jsx","components/ControlPanel/ControlPanelFC.jsx","pages/HomePage/HomeFC.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DeleteBtn from './styles';\r\n\r\nfunction ClearButtonFC({ clickHandler, dataCy, children, width }) {\r\n  return (\r\n    <DeleteBtn onClick={clickHandler} data-cy={dataCy} width={width}>\r\n      {children}\r\n    </DeleteBtn>\r\n  );\r\n}\r\n\r\nClearButtonFC.propTypes = {\r\n  clickHandler: PropTypes.func.isRequired,\r\n  dataCy: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n  width: PropTypes.string,\r\n};\r\nClearButtonFC.defaultProps = {\r\n  width: 'auto',\r\n};\r\n\r\nexport default React.memo(ClearButtonFC);\r\n","import React, { useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { DisplayWrapper, DisplayText, ExpressionText } from './styles';\r\n\r\nfunction DisplayFC() {\r\n  const screenValue = useSelector((state) => state.calculator.num);\r\n  const calcResult = useSelector((state) => state.calculator.answer);\r\n  const lastExpression = useSelector((store) => store.history.lastExpression);\r\n  const scrValue = useMemo(() => (screenValue === '' ? 0 : screenValue), [screenValue]);\r\n  return (\r\n    <DisplayWrapper>\r\n      <ExpressionText>\r\n        {/* Если результат еще не подсчитан, или его значение не валидно,\r\n         то последнее выражение над результатом не выводится */}\r\n        {calcResult === '' || calcResult === 'Invalid input' || calcResult === 'Division by zero error'\r\n          ? ''\r\n          : lastExpression}\r\n      </ExpressionText>\r\n      <DisplayText data-cy=\"display\">{calcResult === '' ? scrValue : calcResult}</DisplayText>\r\n    </DisplayWrapper>\r\n  );\r\n}\r\n\r\nexport default React.memo(DisplayFC);\r\n","import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clickHandler from '@utils/keyClickHandler';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport KeyWrapper from './styles';\r\n\r\nfunction KeyFC({ element }) {\r\n  const dispatch = useDispatch();\r\n  const screenValue = useSelector((state) => state.calculator.num);\r\n  const answer = useSelector((state) => state.calculator.answer);\r\n\r\n  const handleClick = useCallback(() => {\r\n    clickHandler(element, dispatch, screenValue, answer);\r\n  }, [element, dispatch, screenValue, answer]);\r\n\r\n  return (\r\n    <KeyWrapper data-cy={`key-${element}`} onClick={handleClick}>\r\n      {element}\r\n    </KeyWrapper>\r\n  );\r\n}\r\n\r\nKeyFC.propTypes = {\r\n  element: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default React.memo(KeyFC);\r\n","import React from 'react';\r\nimport KeyFC from '@components/Key/KeyFC';\r\nimport { keys6, keys } from '@constants/KeysConstants';\r\nimport { KeypadWrapper, Key } from './styles';\r\n\r\nfunction KeypadFC() {\r\n  return (\r\n    <KeypadWrapper>\r\n      {keys.map((element) => (\r\n        <Key key={element}>\r\n          {element.map((key) => (\r\n            <KeyFC key={key} element={key} />\r\n          ))}\r\n        </Key>\r\n      ))}\r\n\r\n      <Key>\r\n        {keys6.map((element) => (\r\n          <KeyFC key={element} element={element} />\r\n        ))}\r\n      </Key>\r\n    </KeypadWrapper>\r\n  );\r\n}\r\n\r\nexport default KeypadFC;\r\n","import React from 'react';\r\nimport DisplayFC from '@components/Display/DisplayFC';\r\nimport KeypadFC from '@components/Keypad/KeypadFC';\r\nimport CalculatorWrapper from './styles';\r\n\r\nfunction CalculatorFC() {\r\n  return (\r\n    <CalculatorWrapper>\r\n      <DisplayFC />\r\n      <KeypadFC />\r\n    </CalculatorWrapper>\r\n  );\r\n}\r\n\r\nexport default CalculatorFC;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearHistory } from '@store/actions/CalculatorActions';\r\nimport PropTypes from 'prop-types';\r\nimport ClearButton from '@components/ClearButton/ClearButtonFC';\r\n\r\nimport { HistoryWrapper, Heading, Expression, ExpressionsWrapper } from './styles';\r\n\r\nfunction HistoryFC({ isShown }) {\r\n  const dispatch = useDispatch();\r\n  const clickHandler = () => {\r\n    dispatch(clearHistory());\r\n  };\r\n\r\n  const history = useSelector((store) => store.history.history);\r\n  return (\r\n    <HistoryWrapper isShown={isShown}>\r\n      <Heading>History</Heading>\r\n      <ExpressionsWrapper data-cy=\"history\">\r\n        {history.map((expr, index) => (\r\n          <Expression key={`${expr}_${index}`}>{expr}</Expression>\r\n        ))}\r\n      </ExpressionsWrapper>\r\n      <ClearButton clickHandler={clickHandler} dataCy=\"delete-history\">\r\n        Clear\r\n      </ClearButton>\r\n    </HistoryWrapper>\r\n  );\r\n}\r\n\r\nHistoryFC.propTypes = {\r\n  isShown: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default React.memo(HistoryFC);\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { SlArrowLeft, SlArrowRight } from 'react-icons/sl';\r\nimport HistoryFC from '@components/History/HistoryFC';\r\nimport { PanelWrapper, HistoryBtn } from './styles';\r\n\r\nfunction ControlPanelFC() {\r\n  const [isShown, setIsShown] = useState(false);\r\n  const handleClick = () => {\r\n    localStorage.setItem('isShown', !isShown);\r\n    setIsShown((current) => !current);\r\n  };\r\n  const storageIsShown = localStorage.getItem('isShown');\r\n  const checkLocalStorage = useCallback(() => storageIsShown !== 'false', [storageIsShown]);\r\n  useEffect(() => {\r\n    setIsShown(checkLocalStorage);\r\n  }, [setIsShown, checkLocalStorage]);\r\n\r\n  return (\r\n    <PanelWrapper isShown={isShown}>\r\n      <HistoryBtn onClick={handleClick} data-cy=\"open-history\">\r\n        {isShown ? <SlArrowRight /> : <SlArrowLeft />}\r\n      </HistoryBtn>\r\n      <HistoryFC isShown={isShown} />\r\n    </PanelWrapper>\r\n  );\r\n}\r\n\r\nexport default ControlPanelFC;\r\n","import React from 'react';\r\nimport CalculatorFC from '@components/Calculator/CalculatorFC';\r\nimport ControlPanelFC from '@components/ControlPanel/ControlPanelFC';\r\nimport HomeWrapper from './styles';\r\n\r\nfunction HomeFC() {\r\n  return (\r\n    <HomeWrapper>\r\n      <CalculatorFC />\r\n      <ControlPanelFC />\r\n    </HomeWrapper>\r\n  );\r\n}\r\n\r\nexport default HomeFC;\r\n"],"names":["ClearButtonFC","clickHandler","dataCy","children","width","onClick","defaultProps","React","DisplayFC","screenValue","useSelector","state","calculator","num","calcResult","answer","lastExpression","store","history","scrValue","useMemo","KeyFC","element","dispatch","useDispatch","handleClick","useCallback","keys","map","key","keys6","HistoryFC","isShown","expr","index","clearHistory","useState","setIsShown","storageIsShown","localStorage","getItem","checkLocalStorage","useEffect","setItem","current"],"sourceRoot":""}